package kemalkeskin.keskinRental.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kemalkeskin.keskinRental.business.abstracts.ModelService;
import kemalkeskin.keskinRental.business.requests.model.CreateModelRequest;
import kemalkeskin.keskinRental.business.requests.model.UpdateModelRequest;
import kemalkeskin.keskinRental.business.responses.model.GetAllModelResponse;
import kemalkeskin.keskinRental.business.responses.model.GetByIdModelResponse;
import kemalkeskin.keskinRental.business.rules.model.BusinessModelRules;
import kemalkeskin.keskinRental.core.utilities.mapper.ModelMapperService;
import kemalkeskin.keskinRental.dataAccess.abstracts.ModelRepository;
import kemalkeskin.keskinRental.entities.concretes.Model;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Service
@AllArgsConstructor
@NoArgsConstructor
public class ModelManager implements ModelService {

	@Autowired
	private ModelRepository modelRepository;
	@Autowired
	private ModelMapperService modelMapperService;
	@Autowired
	private BusinessModelRules businessModelRules;

	@Override
	public List<GetAllModelResponse> getAll() {
		List<Model> models = modelRepository.findAll();
		List<GetAllModelResponse> getAllModelResponses = models.stream()
				.map(model -> modelMapperService.forResponse().map(model, GetAllModelResponse.class))
				.collect(Collectors.toList());
		return getAllModelResponses;
	}

	@Override
	public GetByIdModelResponse getById(int id) {

		Model model = this.modelRepository.findById(id).orElseThrow();

		GetByIdModelResponse getByIdModelResponse = this.modelMapperService.forResponse().map(model,
				GetByIdModelResponse.class);

		return getByIdModelResponse;
	}

	@Override
	public void add(CreateModelRequest createModelRequest) {

		this.businessModelRules.checkIfModelName(createModelRequest.getName());
		Model model = this.modelMapperService.forRequest().map(createModelRequest, Model.class);
		this.modelRepository.save(model);
	}

	@Override
	public void update(UpdateModelRequest updateModelRequest) {
		Model updateModel = this.modelMapperService.forRequest().map(updateModelRequest, Model.class);
		this.modelRepository.save(updateModel);
		
	}

	@Override
	public void delete(int id) {
		
		this.modelRepository.deleteById(id);
		
	}

}
